const { GoogleSpreadsheet } = require('google-spreadsheet');
const { google } = require('googleapis');

// Cargar las credenciales desde el archivo JSON

const credenciales = require('./json/credenciales.json');
// Crear un cliente OAuth2 con las credenciales
const auth = new google.auth.GoogleAuth({
  credentials: credenciales,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

let SPREADSHEET_ID = '1XG_KJHAvb-obePiPFwyuuQn3RJagC64i7onbO7YUiAs';



async function accederGoogleSheet() {
  try {
    // Obtener una instancia del cliente de Google Sheets
    const sheets = google.sheets({ version: 'v4', auth });

    // ID de la hoja de Google Sheets que deseas leer/escribir
    const spreadsheetId = '1XG_KJHAvb-obePiPFwyuuQn3RJagC64i7onbO7YUiAs';

    // Leer datos desde la hoja
    const readDataResponse = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: 'BASE_ENCUESTA!A1:B10', // Especifica el rango de celdas que deseas leer
    });

    const rows = readDataResponse.data.values;
    if (rows.length) {
      console.log('Datos leídos:');
      rows.forEach((row) => {
        console.log(`${row[0]}, ${row[1]}`);
      });
    } else {
      console.log('No se encontraron datos.');
    }

    /*
    // Escribir datos en la hoja
    const writeDataResponse = await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: 'BASE_ENCUESTA!A1:B1', // Especifica el rango de celdas en el que deseas escribir
      valueInputOption: 'RAW',
      resource: {
        values: [['Dato1', 'Dato2']], // Datos que deseas escribir en formato de matriz
      },
    });*/

    console.log('Datos escritos con éxito.');
  } catch (err) {
    console.error('Error:', err.message);
  }
}

accederGoogleSheet();
async function guardarForm() {
  try {
 
    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);
    await doc.useServiceAccountAuth(auth);
    await doc.loadInfo(); // Cargar información de la hoja de cálculo

    // Acceder a la hoja deseada (índice 0 para la primera hoja)
    const sheet = doc.sheetsByIndex[0];

    // Agregar una nueva fila
    await sheet.addRow({
      Dato1: dato1,
      Dato2: dato2,
    });

    res.send('Datos escritos en la hoja de cálculo.');
  } catch (err) {
    console.error('Error:', err.message);
    res.send('Error al escribir en la hoja de cálculo.');
  }
};


guardarForm();

module.exports = {
  accederGoogleSheet : accederGoogleSheet,
  guardarForm: guardarForm
}

/*import { JWT } from 'google-auth-library';



const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: [
      'https://www.googleapis.com/auth/spreadsheets',
    ],
  });


const doc = new GoogleSpreadsheet('<the sheet ID from the url>', serviceAccountAuth);

await doc.loadInfo(); // loads document properties and worksheets
console.log(doc.title);
await doc.updateProperties({ title: 'renamed doc' });

const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
console.log(sheet.title);
console.log(sheet.rowCount);

// adding / removing sheets
const newSheet = await doc.addSheet({ title: 'another sheet' });
await newSheet.delete();



const credenciales = require('./json/credenciales.json');

let googleId ="1ieQeyxjymaZ4iwr4iohX1TY-FQwm2JFR";
async function accederGoogleSheet() {
    const doc = new GoogleSpreadsheet(googleId, );
    
    await doc.useServiceAccountAuth(credenciales);
    await doc.loadInfo();

    // Crear hojas
    const sheet = doc.sheetsByIndex[0];

    console.log(sheet);
}

accederGoogleSheet();


module.exports = {
    accederGoogleSheet : accederGoogleSheet
}
*/